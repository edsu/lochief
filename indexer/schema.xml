<?xml version="1.0" ?>
<!-- The Solr schema file. This file should be named "schema.xml" and
 should be in the conf directory under the solr home
 (i.e. ./solr/conf/schema.xml by default) 
 or located where the classloader for the Solr webapp can find it.

 For more information, on how to customize this file, please see...
 http://wiki.apache.org/solr/SchemaXml
-->

<schema name="example" version="1.1">
  <types>
    <!-- field type definitions. The "name" attribute is
         just a label to be used by field definitions.  The "class"
         attribute and any other attributes determine the real
         behavior of the fieldtype.  -->

    <!-- The StrField type is not analyzed, but indexed/stored verbatim.  
       - StrField and TextField support an optional compressThreshold which
       limits compression (if enabled in the derived fields) to values which
       exceed a certain size (in characters).
    -->
    <fieldtype name="string" class="solr.StrField" sortMissingLast="true"/>

    <!-- boolean type: "true" or "false" -->
    <fieldtype name="boolean" class="solr.BoolField" sortMissingLast="true"/>

    <!-- The optional sortMissingLast and sortMissingFirst attributes are
         currently supported on types that are sorted internally as a strings.
       - If sortMissingLast="true" then a sort on this field will cause documents
       without the field to come after documents with the field,
       regardless of the requested sort order (asc or desc).
       - If sortMissingFirst="true" then a sort on this field will cause documents
       without the field to come before documents with the field,
       regardless of the requested sort order.
       - If sortMissingLast="false" and sortMissingFirst="false" (the default),
       then default lucene sorting will be used which places docs without the field
       first in an ascending sort and last in a descending sort.
    -->    

         
    <!-- numeric field types that store and index the text
         value verbatim (and hence don't support range queries since the
         lexicographic ordering isn't equal to the numeric ordering) -->
    <fieldtype name="integer" class="solr.IntField"/>
    <fieldtype name="long" class="solr.LongField"/>
    <fieldtype name="float" class="solr.FloatField"/>
    <fieldtype name="double" class="solr.DoubleField"/>


    <!-- Numeric field types that manipulate the value into
         a string value that isn't human readable in it's internal form,
         but with a lexicographic ordering the same as the numeric ordering
         so that range queries correctly work. -->
    <fieldtype name="sint" class="solr.SortableIntField" sortMissingLast="true"/>
    <fieldtype name="slong" class="solr.SortableLongField" sortMissingLast="true"/>
    <fieldtype name="sfloat" class="solr.SortableFloatField" sortMissingLast="true"/>
    <fieldtype name="sdouble" class="solr.SortableDoubleField" sortMissingLast="true"/>


    <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
         is a more restricted form of the canonical representation of dateTime
         http://www.w3.org/TR/xmlschema-2/#dateTime    
         The trailing "Z" designates UTC time and is mandatory.
         Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
         All other components are mandatory. -->
    <fieldtype name="date" class="solr.DateField" sortMissingLast="true"/>

    <!-- solr.TextField allows the specification of custom text analyzers
         specified as a tokenizer and a list of token filters. Different
         analyzers may be specified for indexing and querying.

         The optional positionIncrementGap puts space between multiple fields of
         this type on the same document, with the purpose of preventing false phrase
         matching across fields.

         For more info on customizing your analyzer chain, please see...
	  http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
	 
     -->

     <!-- Standard analyzer commonly used by Lucene developers
     -->
    <!-- Standard analyzer commonly used by Lucene developers -->
    <fieldtype name="text_lu" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StandardFilterFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory"/>
        <filter class="solr.EnglishPorterFilterFactory"/>
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
    </fieldtype>
    <!-- One could also specify an existing Analyzer class that has a
         default constructor via the class attribute on the analyzer element
    <fieldtype name="text_lu" class="solr.TextField">
      <analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/>
    </fieldType>
    -->
    
    <!-- A text field that only splits on whitespace for more exact matching -->
    <fieldtype name="text_ws" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
      </analyzer>
    </fieldtype>

    <!-- A text field that uses WordDelimiterFilter to enable splitting and matching of
        words on case-change, alpha numeric boundaries, and non-alphanumeric chars
        so that a query of "wifi" or "wi fi" could match a document containing "Wi-Fi".
        Synonyms and stopwords are customized by external files, and stemming is enabled
        Duplicate tokens at the same position (which may result from Stemmed Synonyms or
        WordDelim parts) are removed.
        -->
    <fieldtype name="text" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
          <tokenizer class="solr.WhitespaceTokenizerFactory"/>
          <!-- in this example, we will only use synonyms at query time
          <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
          -->
          <filter class="solr.StopFilterFactory" ignoreCase="true"/>
          <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
          <filter class="solr.LowerCaseFilterFactory"/>
          <filter class="solr.EnglishPorterFilterFactory" protected="protwords.txt"/>
          <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
      <analyzer type="query">
          <tokenizer class="solr.WhitespaceTokenizerFactory"/>
          <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
          <filter class="solr.StopFilterFactory" ignoreCase="true"/>
          <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0"/>
          <filter class="solr.LowerCaseFilterFactory"/>
          <filter class="solr.EnglishPorterFilterFactory" protected="protwords.txt"/>
          <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
    </fieldtype>


    <!-- Less flexible matching, but less false matches.  Probably not ideal for product names
         but may be good for SKUs.  Can insert dashes in the wrong place and still match. -->
    <fieldtype name="textTight" class="solr.TextField" positionIncrementGap="100" >
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.EnglishPorterFilterFactory" protected="protwords.txt"/>
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
    </fieldtype>

 </types>


 <fields>
   <!-- Valid attributes for fields:
       name: mandatory - the name for the field
       type: mandatory - the name of a previously defined type from the <types> section
       indexed: true if this field should be indexed (searchable)
       stored: true if this field should be retrievable
       compressed: [false] if this field should be stored using gzip compression
                   (this will only apply if the field type is compressable; among
                    the standard field types, only TextField and StrField are)
       multiValued: true if this field may contain multiple values per document
       omitNorms: (expert) set to true to omit the norms associated with this field
                  (this disables length normalization and index-time boosting for the field)     
   -->

   
<!-- begin added csd 9.12.2006 -->
	<field name="bib_num" type="sint" indexed="true" stored="true" /> <!-- sint == sortable int -->
	<field name="title" type="text" indexed="true" stored="true" />
    
	<field name="author" type="text" indexed="true" stored="true" multiValued="true" />
	<field name="performer" type="text" indexed="true" stored="true" multiValued="true" />
	<!--<field name="subject" type="text" indexed="true" stored="true" multiValued="true" />-->
    
    <field name="audience" type="string" indexed="true" stored="true" />
	<field name="rating" type="string" indexed="true" stored="true" />
	<field name="summary" type="text" indexed="true" stored="true" multiValued="true" />
	

	<!-- begin subject fields (copied to the generic subject text field later on -->
    <field name="genre" type="string" indexed="true" stored="true" multiValued="true" />
    <field name="subjectname" type="string" indexed="true" stored="true" multiValued="true" />
    <field name="subjectentity" type="string" indexed="true" stored="true" multiValued="true" />
    <field name="topic" type="string" indexed="true" stored="true" multiValued="true" />
    <field name="place" type="string" indexed="true" stored="true" multiValued="true" />
	<!-- end subject fields -->


    <field name="language" type="string" indexed="true" stored="true" />    
    
	<field name="format" type="string" indexed="true" stored="true" />

	<field name="pubdate" type="string" indexed="true" stored="true" />

	<field name="publisher" type="text" indexed="true" stored="true" />

    <field name="series" type="text" indexed="true" stored="true" />
    
	<field name="isbn" type="string" indexed="true" stored="true" />
	
	<field name="notes" type="text" indexed="true" stored="true" multiValued="true" />
	
	<field name="url" type="string" indexed="true" stored="true" multiValued="true" />
	
	<field name="contents" type="text" indexed="true" stored="true" multiValued="true" />


	<!-- begin item info (from 935 or elsewhere) -->
	<field name="location" type="string" indexed="true" stored="true" multiValued="true" />
	<field name="collection" type="string" indexed="true" stored="true" multiValued="true" />
	<field name="deweyClass" type="string" indexed="true" stored="true" multiValued="true" />
	<!-- end item info -->
	
	<!-- this stores a serialized python object containing the marc record -->
	<field name="marc_record" type="string" indexed="false" stored="true" multiValued="false" />
	
    
    <!-- csd: the following are used for limiting and faceting options (where you definitely
    do not want a text field) -->
    
    <!-- the following are text fields that we also want to use for facets/limits, so we duplicate
    as a string field instead.  -->
    <field name="author_exact" type="string" indexed="true" multiValued="true" stored="false" />
    <!--<field name="pubdate_exact" type="string" indexed="true" />
    <field name="format_exact" type="string" indexed="true"  /> -->
    <field name="publisher_exact" type="string" indexed="true" stored="false" />
    

   <!-- catchall field, containing all other searchable text fields (implemented
        via copyField further on in this schema  -->
   <field name="text" type="text" indexed="true" stored="false" multiValued="true"/>
   <field name="subject" type="text" indexed="true" stored="true" multiValued="true" />

 </fields>

 <!-- field to use to determine and enforce document uniqueness. -->
 <uniqueKey>bib_num</uniqueKey>

 <!-- field for the QueryParser to use when an explicit fieldname is absent -->
 <defaultSearchField>text</defaultSearchField> <!-- csd: was text -->

 <!-- SolrQueryParser configuration:
        defaultOperator="AND|OR"
 -->
 <solrQueryParser defaultOperator="AND"/>

  <!-- copyField commands copy one field to another at the time a document
        is added to the index.  It's used either to index the same field different
        ways, or to add multiple fields to the same field for easier/faster searching.  -->
   
   <copyField source="title" dest="text"/>

   <copyField source="author" dest="text"/>
   <copyField source="author" dest="author_exact" />
   
   <copyField source="performer" dest="text" />
 	
	<!-- begin subject-related -->

   <copyField source="genre" dest="text" />  
   <copyField source="genre" dest="subject" />
  
    <copyField source="subjectname" dest="text"/>
    <copyField source="subjectname" dest="subject"/>

    <copyField source="subjectentity" dest="text"/>
    <copyField source="subjectentity" dest="subject"/>

	<copyField source="topic" dest="text"/>
    <copyField source="topic" dest="subject"/>
	
	<copyField source="place" dest="text"/>
	<copyField source="place" dest="subject"/>
	<!-- end subject-related -->


   <copyField source="summary" dest="text"/> 
   
   <copyField source="format" dest="text"/>

   <copyField source="publisher" dest="text"/>
   <copyField source="publisher" dest="publisher_exact" />
 
    <copyField source="series" dest="text" />
   <!--<copyField source="pubdate" dest="text" /> 
   <copyField source="pubdate" dest="pubdate_exact" /> -->
   
   <copyField source="isbn" dest="text" />
   
   <copyField source="notes" dest="text" />
   <copyField source="contents" dest="text" />
   
   <copyField source="url" dest="text" />



 <!-- Similarity is the scoring routine for each document vs a query.
      A custom similarity may be specified here, but the default is fine
      for most applications.  -->
 <!-- <similarity class="org.apache.lucene.search.DefaultSimilarity"/> -->

</schema>

